@page "/applications/{id:int}"
@inject ApplicationService ApplicationService
@inject NavigationManager NavigationManager
@inject EnumService EnumService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>@Title</PageTitle>

@if (Id is null || Application is null || actions is null || statuses is null)
{
	<Spinner />
}
else
{
	<div class="d-flex justify-content-between mb-4">
		<h1 class="fw-bold fs-2 mb-0">@Application.JobTitle</h1>
		<a href="/applications" class="btn btn-primary">
			<i class="bi bi-arrow-left"></i> Back to applications
		</a>
	</div>
	<div class="row gy-4">
		<div class="col-md-8">
			<div class="card shadow-sm">
				<div class="card-body p-4">
					<div class="d-flex justify-content-between align-items-center mb-4">
						<div class="">
							<h4 class="card-title fw-medium">
								@Application.CompanyName
							</h4>
							<p class="text-muted fs-6 mb-0">
								<i class="bi bi-geo-alt"></i>
								@Application.Location
							</p>
						</div>
						<div class="text-end">
							<div>
								@if (!Application.IsDeleted)
								{
									<a class="btn btn-outline-success btn-sm me-2" role="button" data-bs-target="#updateStatusModal" data-bs-toggle="modal">
										<i class="bi bi-ui-checks"></i> Status update
									</a>
									<a class="btn btn-outline-secondary btn-sm me-2" href="@($"/applications/edit/{Application.Id}")">
										<i class="bi bi-pencil-square"></i> Edit
									</a>
								}
								<a class="btn btn-outline-danger btn-sm" role="button" data-bs-target="#deleteModal" data-bs-toggle="modal">
									<i class="bi bi-trash"></i> Delete
								</a>
							</div>
							<span class="badge bg-primary fw-medium rounded-pill">
								@Application.Status
							</span>

						</div>
					</div>
					<h5 class="fw-medium">Job description</h5>
					<p class="card-text text-small mb-4">@Application.JobDescription</p>

					<div class="row row-cols-1 row-cols-sm-2 g-3">
						<div class="col">
							<p class="tiny-label fw-medium">Contract type</p>
							<p class="mb-0 fs-6 fw-medium">
								<i class="bi bi-file-earmark-text"></i>
								@Application.ContractType
							</p>
						</div>
						<div class="col">
							<p class="tiny-label fw-medium">Source</p>
							<p class="mb-0 fs-6 fw-medium">
								<i class="bi bi-globe2"></i>
								@Application.Source
							</p>
						</div>
						<div class="col">
							<p class="tiny-label fw-medium">Key words</p>
							<p class="mb-0 fs-6 fw-medium">
								<i class="bi bi-tags"></i>
								@(Application.KeyWords ?? "No key words submitted")
							</p>
						</div>
						<div class="col">
							<p class="tiny-label fw-medium">Priority</p>
							<p class="mb-0 fs-6 fw-medium">
								<i class="bi bi-exclamation-circle"></i>
								@Application.Priority
							</p>
						</div>
						<div class="col">
							<p class="tiny-label fw-medium">Interest level</p>
							<p class="mb-0 fs-6 fw-medium">
								<Rating CurrentRating="@Application.InterestLevel"
								IsReadOnly="true"
								SizeClass="rating-sm" />
							</p>
						</div>
						<div class="col">
							<p class="tiny-label fw-medium">Offer URL</p>
							<p class="mb-0 fs-6 fw-medium">
								<a href="@Application.OfferUrl" target="_blank" class="text-decoration-none">
									Show offer
									<i class="bi bi-box-arrow-up-right"></i>
								</a>
							</p>
						</div>
						@if (Application.MinSalaryProposed.HasValue && Application.MaxSalaryProposed.HasValue)
						{
							<div class="col">
								<p class="tiny-label fw-medium">Proposed salary</p>
								<p class="mb-0 fs-6 fw-medium">
									@($"{Application.MinSalaryProposed:#,0.00} - {Application.MaxSalaryProposed:#,0.00} {Application.Currency}")
								</p>
							</div>
						}
						@if (Application.MinSalaryOffered.HasValue && Application.MaxSalaryOffered.HasValue)
						{
							<div class="col">
								<p class="tiny-label fw-medium">Offered salary</p>
								<p class="mb-0 fs-6 fw-medium">
									@($"{Application.MinSalaryOffered:#,0.00} - {Application.MaxSalaryOffered:#,0.00} {Application.Currency}")
								</p>
							</div>
						}
					</div>
					<div class="col mt-3">
						<p class="tiny-label fw-medium">Notes</p>
						<p class="mb-0 fs-6 fw-medium">
							@(Application.Notes ?? "No notes submitted")
						</p>
					</div>
				</div>
			</div>
		</div>
		<div class="col-md-4">
			<!-- Important dates card -->
			<div class="card shadow-sm mb-4">
				<div class="card-body px-4">
					<div class="card-title fw-medium fs-5 mb-3">
						Important dates
					</div>
					<div class="card-text fs-6">
						<div class="mb-2">
							<p class="tiny-label">Application date</p>
							<p class="mb-0">
								<i class="bi bi-calendar4 me-1"></i>
								@Application.ApplicationDate.ToString("dd MMM yyyy")
							</p>
						</div>
						@if (Application.PostingDate.HasValue)
						{
							<div class="mb-2">
								<p class="tiny-label">Posting date</p>
								<p class="mb-0">
									<i class="bi bi-calendar4 me-1"></i>
									@Application.PostingDate?.ToString("dd MMM yyyy")
								</p>
							</div>
						}
						@if (Application.ClosingDate.HasValue)
						{
							<div class="mb-2">
								<p class="tiny-label">Closing date</p>
								<p class="mb-0">
									<i class="bi bi-calendar4 me-1"></i>
									@Application.ClosingDate?.ToString("dd MMM yyyy")
								</p>
							</div>
						}
					</div>
				</div>
			</div>
			<!-- Important dates card -->

			<!-- Steps card -->
			<div class="card shadow-sm mb-4">
				<div class="card-body px-4">
					<div class="card-title fw-medium fs-5 mb-3">
						Steps
					</div>
					<div class="card-text fs-6">
						<div class="mb-2">
							<p class="tiny-label">Last action</p>
							<p class="mb-0">
								<span class="fw-medium">
									@Application.LastAction
								</span>
								<span class="tiny-label fw-medium">
									(@Application.LastActionDate.ToString("dd MMM yyyy"))
								</span>
							</p>
						</div>
						<div class="mb-2">
							<p class="tiny-label">Next action</p>
							<p class="mb-0">
								<span class="fw-medium">
									@Application.NextAction
								</span>
								@if (Application.NextActionDate.HasValue)
								{
									<span class="tiny-label fw-medium">
										(@Application.NextActionDate?.ToString("dd MMM yyyy"))
									</span>
								}								
							</p>
						</div>
					</div>
				</div>
			</div>
			<!-- Steps card -->

			<!-- Files card -->
			<div class="card shadow-sm mb-4">
				<div class="card-body px-4">
					<div class="card-title fw-medium fs-5 mb-3">
						Files
					</div>
					<div class="card-text fs-6">
						<p class="mb-2">
							<i class="bi bi-file-earmark-person"></i>
							<a href="@Application.ResumeFilePath" target="_blank" class="text-decoration-none fw-medium">
								Resume
							</a>
							<span class="text-muted small">(@Application.ResumeFileName)</span>
						</p>
						@if (!string.IsNullOrWhiteSpace(Application.CoverLetterFilePath))
						{
							<p class="mb-2">
								<i class="bi bi-file-earmark-text-fill"></i>
								<a href="@Application.CoverLetterFilePath" target="_blank" class="text-decoration-none fw-medium">
									Cover Letter
								</a>
								<span class="text-muted small">(@Application.CoverLetterFileName)</span>
							</p>
						}
					</div>
				</div>
			</div>
			<!-- Files card -->

			<!-- Contact card -->
			@if (!string.IsNullOrWhiteSpace(Application.ContactName))
			{
				<div class="card shadow-sm mb-4">
					<div class="card-body px-4">
						<div class="card-title fw-medium fs-5 mb-3">
							Contact
						</div>
						<div class="card-text fs-6">
							<p class="mb-2">
								<i class="bi bi-person"></i>
								@Application.ContactName
							</p>
							@if (!string.IsNullOrWhiteSpace(Application.ContactEmail))
							{
								<p class="mb-2">
									<i class="bi bi-envelope-at"></i>
									<a href="mailto:@Application.ContactEmail" class="text-decoration-none">
										@Application.ContactEmail
									</a>
								</p>
							}						
						</div>
					</div>
				</div>
			}
			<!-- Contact card -->
		</div>
	</div>

	<!-- Delete modal -->
	<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header bg-danger text-white">
					<h1 class="modal-title fs-5" id="deleteModalLabel">Delete confirmation</h1>
					<button type="button" class="btn-close bg-white" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					Are you sure you want to delete the application for <strong>@Application?.JobTitle</strong> at <strong>@Application?.CompanyName</strong>?<br />
					<p class="mt-2 mb-0">
						<i class="bi bi-exclamation-circle text-danger"></i>This action cannot be undone.
					</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
					<button type="button" class="btn btn-danger" @onclick="ConfirmDeleteAsync" data-bs-dismiss="modal">Delete</button>
				</div>
			</div>
		</div>
	</div>

	<!-- Update status modal -->
	<div class="modal fade" id="updateStatusModal" tabindex="-1" aria-labelledby="updateStatusModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header bg-success text-white">
					<h1 class="modal-title fs-5" id="updateStatusModalLabel">Update application status</h1>
					<button type="button" class="btn-close bg-white" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<EditForm Model="ApplicationStatus" FormName="updateStatus" OnValidSubmit="HandleUpdateStatusSubmitAsync" Enhance>
					<div class="modal-body">
						<div class="form-group mb-3">
							<label class="form-label required">Status</label>
							<InputSelect id="status" class="form-select" @bind-Value="ApplicationStatus.Status">
								<optgroup label="Select application status">
									@foreach (var status in statuses)
									{
										<option value="@status.Id">@status.Name</option>
									}
								</optgroup>
							</InputSelect>
						</div>
						@if (ApplicationStatus.Status == rejectedStatusId)
						{
							<div class="form-group mb-3">
								<label class="form-label required">Rejection reason</label>
								<InputSelect id="rejectionReason" class="form-select" @bind-Value="ApplicationStatus.RejectionReason">
									<optgroup label="Select rejection reason">
										@foreach (var rejectionReason in rejectionReasons)
										{
											<option value="@rejectionReason.Id">@rejectionReason.Name</option>
										}
									</optgroup>
								</InputSelect>
							</div>
						}
						<div class="form-group mb-3">
							<label class="form-label required">Next action</label>
							<InputSelect id="nextAction" class="form-select" @bind-Value="ApplicationStatus.NextAction">
								<optgroup label="Select next action">
									@foreach (var action in actions)
									{
										<option value="@action.Id">@action.Name</option>
									}
								</optgroup>
							</InputSelect>
						</div>
						<div class="form-group mb-3">
							<label class="form-label">Next action date</label>
							<InputDate id="nextActionDate" class="form-control" @bind-Value="ApplicationStatus.NextActionDate"></InputDate>
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
						<button type="submit" class="btn btn-success" data-bs-dismiss="modal">Update</button>
					</div>
				</EditForm>				
			</div>
		</div>
	</div>
}

<style>
	.tiny-label {
	font-size: 14px;
	color: #64748B;
	margin-bottom: 0;
	}

	.text-decoration-none:hover {
	text-decoration: underline !important;
	}
</style>

@code {
	[Parameter]
	public int? Id { get; set; }

	private string Title { get; set; } = "Application Details";

	private ApplicationModel? Application;
	private List<EnumItem>? actions;
	private List<EnumItem>? statuses;
	private List<EnumItem>? rejectionReasons;
	private UpdateApplicationStatusModel? ApplicationStatus;
	private int? rejectedStatusId;

	protected override async Task OnInitializedAsync()
	{
		actions = await EnumService.GetActionTypesAsync();
		statuses = await EnumService.GetApplicationStatusesAsync();
		rejectionReasons = await EnumService.GetRejectionReasonsAsync();
		rejectedStatusId = statuses.Where(s => s.Name == "Rejected").Select(s => s.Id).FirstOrDefault();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (Id.HasValue)
		{
			Application = await ApplicationService.GetApplicationByIdAsync(Id.Value);
			Title = $"{Application?.JobTitle} - Application Details";
			if (Application is not null &&
				statuses is not null &&
				actions is not null)
			{
				ApplicationStatus = new UpdateApplicationStatusModel
				{
					Status = statuses.Where(s => s.Name == Application.Status).Select(s => s.Id).FirstOrDefault(),
					NextAction = actions.Where(s => s.Name == Application.NextAction).Select(s => s.Id).FirstOrDefault(),
					NextActionDate = Application.NextActionDate
				};
			}
		}
		else
		{
			NavigationManager.NavigateTo("/applications");
		}
	}

	private async Task ConfirmDeleteAsync()
	{
		if (Application != null)
		{
			await ApplicationService.SoftDeleteApplicationAsync(Application.Id);
			NavigationManager.NavigateTo("/applications");
		}
	}

	private async Task HandleUpdateStatusSubmitAsync()
	{
		ArgumentNullException.ThrowIfNull(Application);
		ArgumentNullException.ThrowIfNull(ApplicationStatus);

		await ApplicationService.UpdateApplicationStatusAsync(Application.Id, ApplicationStatus);

		Application = await ApplicationService.GetApplicationByIdAsync(Application.Id);

		StateHasChanged();
	}
}
