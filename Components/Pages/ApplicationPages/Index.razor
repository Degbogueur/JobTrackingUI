@page "/applications"
@using System.Threading
@inject ApplicationService ApplicationService
@inject EnumService EnumService
@inject NavigationManager NavigationManager
@implements IDisposable
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Applications</PageTitle>

<div class="d-flex justify-content-between mb-4">
	<h1 class="fw-bold fs-2 mb-0">Applications</h1>
	<div>
		<a href="/applications/create" class="btn btn-primary">
			<i class="bi bi-plus-circle"></i> New application
		</a>
		<a href="/applications/trash" class="btn btn-outline-danger ms-2">
			<i class="bi bi-trash"></i> Deleted Applications
		</a>
	</div>
</div>

@if (applications is null || applications.Items is null)
{
	<Spinner />
}
else
{
	<div class="my-4">
		<div class="d-flex flex-column flex-sm-row justify-content-between align-items-start align-items-sm-center mb-4 gap-3">

			<!-- Barre de filtre -->
			<div class="d-flex flex-column flex-sm-row gap-3 w-100">
				<div class="flex-fill position-relative">
					<input type="text" class="form-control" @oninput="OnSearchInput" placeholder="Search by title, company or location..." />
				</div>

				<button class="btn btn-light border d-flex align-items-center" data-bs-auto-close="outside"
				type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
					<i class="bi bi-funnel me-2"></i> Filters
				</button>
				<div class="dropdown-menu columns-2" aria-labelledby="filterDropdown" 
				style="font-size: 14px; max-width: 375px;">
					<h6 class="dropdown-header">Status</h6>
					<div class="row">
						@if (statusList is not null)
						{
							@foreach (var status in statusList)
							{
								<div class="col-12 col-md-6">
									<div class="form-check ms-3">
										<input class="form-check-input" type="checkbox"
										@bind="@statusFilters[status.Id]"
										id="@status.Name">
										<label class="form-check-label" for="@status.Name">@status.Name</label>
									</div>
								</div>
							}
						}
					</div>
					<h6 class="dropdown-header mt-2">Priority</h6>
					<div class="row">
						@if (priorityList is not null)
						{
							@foreach (var priority in priorityList)
							{
								<div class="col-12 col-md-6">
									<div class="form-check ms-3">
										<input class="form-check-input" type="checkbox"
										@bind="@priorityFilters[priority.Id]"
										id="@priority.Name">
										<label class="form-check-label" for="@priority.Name">@priority.Name</label>
									</div>
								</div>
							}
						}
					</div>
					<div class="d-flex justify-content-between px-3 py-2">
						<button class="btn btn-light border" @onclick="ClearAllFilters">
							Clear all
						</button>
						<button class="btn btn-primary" @onclick="ApplyFilters">
							Apply
						</button>
					</div>
				</div>

				<button class="btn border" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
					<i class="bi bi-sort-down"></i> Sort by
				</button>
				<ul class="dropdown-menu" aria-labelledby="sortDropdown" style="font-size: 14px;">
					<li>
						<a class="dropdown-item @(sortBy == "name-asc" ? "active" : "")" role="button" @onclick='() => OnSortingChanged("name-asc")'>
							<i class="bi bi-sort-alpha-down"></i> Name (A-Z)
						</a>
					</li>
					<li>
						<a class="dropdown-item @(sortBy == "name-desc" ? "active" : "")" role="button" @onclick='() => OnSortingChanged("name-desc")'>
							<i class="bi bi-sort-alpha-down-alt"></i> Name (Z-A)
						</a>
					</li>
					<li>
						<a class="dropdown-item @(sortBy == "date-asc" ? "active" : "")" role="button" @onclick='() => OnSortingChanged("date-asc")'>
							<i class="bi bi-sort-numeric-down"></i> Application date (Older first)
						</a>
					</li>
					<li>
						<a class="dropdown-item @(sortBy == "date-desc" ? "active" : "")" role="button" @onclick='() => OnSortingChanged("date-desc")'>
							<i class="bi bi-sort-numeric-down-alt"></i> Application date (Recent first)
						</a>
					</li>
				</ul>
			</div>

			<!-- Boutons de disposition -->
			<div class="d-flex align-items-center gap-2">
				<button class="btn @(isGridView ? "btn-primary" : "btn-outline-secondary")"
				@onclick="ToggleView">
					<i class="bi bi-grid"></i>
				</button>
				<button class="btn @(!isGridView ? "btn-primary" : "btn-outline-secondary")"
				@onclick="ToggleView">
					<i class="bi bi-list"></i>
				</button>
			</div>
		</div>
	</div>

	@if (isLoading)
	{
		<Spinner />
	}
	else
	{
		if (applications.Items.Count == 0)
		{
			<div class="alert alert-info text-center">
				<i class="bi bi-exclamation-triangle"></i> No applications found.
			</div>
		}
		else 
		{
			@if (isGridView)
			{
				<div class="row g-4">
					@foreach (var application in applications.Items)
					{
						<div class="col-lg-4 col-md-6">
							<div class="card shadow-sm h-100">
								<div class="card-body p-4 d-flex flex-column h-100">
									<div class="d-flex justify-content-between align-items-center">
										<a class="card-title fw-medium mb-0" href="@($"/applications/{application.Id}")">
											@application.JobTitle
										</a>
										<span class="badge bg-primary fw-medium rounded-pill">@application.Status</span>
									</div>
									<p class="card-text text-small mb-3">
										@application.CompanyName
										<span class="text-muted ms-3"><i class="bi bi-geo-alt"></i>@application.Location</span>
									</p>
									<div class="text-small text-muted" style="font-size: 13px;">
										<p class="card-text mb-2">
											<i class="bi bi-calendar4"></i> Applied on @application.ApplicationDate.ToString("dd MMM yyyy")
										</p>
										@if (application.NextActionDate.HasValue && application.NextAction != null)
										{
											<p class="card-text mb-0">
												<i class="bi bi-calendar4"></i> @application.NextAction on @application.NextActionDate?.ToString("dd MMM yyyy")
											</p>
										}
									</div>
									<p class="mt-2 text-truncate">
										@(application.JobDescription ?? "No description submitted")
									</p>
									<div class="d-flex justify-content-end align-items-center mt-auto gap-2">
										<a href="@($"/applications/{application.Id}")" class="btn btn-outline-primary btn-sm">
											<i class="bi bi-eye"></i>
										</a>
										<a href="@($"/applications/edit/{application.Id}")" class="btn btn-outline-secondary btn-sm">
											<i class="bi bi-pencil-square"></i>
										</a>
										<a role="button" class="btn btn-outline-danger btn-sm" data-bs-target="#deleteModal" data-bs-toggle="modal" @onclick="() => DisplayDeleteModal(application)">
											<i class="bi bi-trash"></i>
										</a>
									</div>
								</div>
							</div>
						</div>
					}
				</div>
			}
			else
			{
				<table class="table border table-hover table-striped vertical-align-middle fixed-height">
					<thead class="table-light" style="vertical-align: middle;">
						<tr>
							<th scope="col">Job title</th>
							<th scope="col">Company</th>
							<th scope="col">Location</th>
							<th scope="col">Application date</th>
							<th scope="col">Status</th>
							<th scope="col">Next action</th>
							<th scope="col">Actions</th>
						</tr>
					</thead>
					<tbody class="table-group-divider">
						@foreach (var application in applications.Items)
						{
							<tr>
								<td class="fw-medium">
									<a class="job-title fw-medium mb-0" href="@($"/applications/{application.Id}")">
										@application.JobTitle
									</a>
								</td>
								<td>@application.CompanyName</td>
								<td>@application.Location</td>
								<td>@application.ApplicationDate.ToShortDateString()</td>
								<td>
									<span class="badge bg-primary fw-medium rounded-pill">@application.Status</span>
								</td>
								<td>
									@application.NextAction
									<p class="small text-muted mb-0">@application.NextActionDate?.ToShortDateString()</p>
								</td>
								<td>
									<div class="btn-group">
										<a href="@($"/applications/{application.Id}")" class="btn btn-outline-primary btn-sm">
											<i class="bi bi-eye"></i>
										</a>
										<a href="@($"/applications/edit/{application.Id}")" class="btn btn-outline-secondary btn-sm">
											<i class="bi bi-pencil-square"></i>
										</a>
										<a role="button" class="btn btn-outline-danger btn-sm" data-bs-target="#deleteModal" data-bs-toggle="modal" @onclick="() => DisplayDeleteModal(application)">
											<i class="bi bi-trash"></i>
										</a>
									</div>									
								</td>
							</tr>
						}
					</tbody>
				</table>
			}

			<div class="d-flex justify-content-center mt-4">
				<Pagination PageIndex="applications.PageIndex"
				PageSize="applications.PageSize"
				TotalItems="applications.TotalItems"
				PageIndexChanged="OnPageChanged" />
			</div>
		}		
	}


}

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header bg-danger text-white">
				<h1 class="modal-title fs-5" id="deleteModalLabel">Delete confirmation</h1>
				<button type="button" class="btn-close bg-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete the application for <strong>@selectedApplication?.JobTitle</strong> at <strong>@selectedApplication?.CompanyName</strong>?<br />
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" @onclick="() => ConfirmDeleteAsync(selectedApplication?.Id)" data-bs-dismiss="modal">Delete</button>
			</div>
		</div>
	</div>
</div>

<style>
	.card-title, a.job-title {	
	color: #000;
	text-decoration: none;
	}

	.card-title {
		font-size: 18px;
	}

	.card-title:hover, a.job-title:hover {
	text-decoration: underline;
	color: var(--bs-primary);
	}

	.text-muted {
	color: #64748b !important;
	}

	.text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	}

	.vertical-align-middle {
		vertical-align: middle;
	}

	.fixed-height tr {
		height: 60px;
	}
</style>

@code {
	PaginatedModel<ApplicationModel>? applications;
	private ApplicationModel? selectedApplication;
	private List<EnumItem>? statusList;
	private List<EnumItem>? priorityList;

	private Timer? searchTimer;
	private bool isLoading = false;
	private string? searchTerm;
	private string? sortBy;
	private Dictionary<int, bool> statusFilters = new();
	private Dictionary<int, bool> priorityFilters = new();
	private bool isGridView = true;

	protected override async Task OnInitializedAsync()
	{
		applications = await ApplicationService.GetApplicationsAsync();
		priorityList = await EnumService.GetPrioritiesAsync();
		statusList = await EnumService.GetApplicationStatusesAsync();
		statusFilters = statusList.ToDictionary(x => x.Id, x => false);
		priorityFilters = priorityList.ToDictionary(x => x.Id, x => false);
	}

	private void DisplayDeleteModal(ApplicationModel application)
	{
		selectedApplication = application;
	}

	private async Task ConfirmDeleteAsync(int? id)
	{
		if (id.HasValue)
		{
			await ApplicationService.SoftDeleteApplicationAsync(id.Value);

			applications = await ApplicationService.GetApplicationsAsync();
		}
		else
		{
			selectedApplication = null;
		}
	}

	private async Task OnPageChanged(int pageIndex)
	{
		applications = await ApplicationService.GetApplicationsAsync(new QueryParameters { PageIndex = pageIndex });
	}

	private void OnSearchInput(ChangeEventArgs e)
	{
		var newSearchTerm = e.Value?.ToString() ?? string.Empty;

		searchTimer?.Dispose();

		isLoading = true;
		StateHasChanged();

		searchTimer = new Timer(async _ =>
		{
			await InvokeAsync(async () =>
			{
				searchTerm = newSearchTerm;
				var parameters = new QueryParameters
				{
					SearchTerm = searchTerm,
					SortBy = sortBy,
					StatusFilters = statusFilters.Where(x => x.Value).Select(x => x.Key).ToArray(),
					PriorityFilters = priorityFilters.Where(x => x.Value).Select(x => x.Key).ToArray()
				};
				applications = await ApplicationService.GetApplicationsAsync(parameters);

				isLoading = false;
				StateHasChanged();
			});
		}, null, 500, Timeout.Infinite);
	}

	public void Dispose()
	{
		searchTimer?.Dispose();
	}

	private async Task OnSortingChanged(string sortParameter)
	{
		isLoading = true;
		StateHasChanged();

		if (sortBy != sortParameter)
		{
			sortBy = sortParameter;
			var parameters = new QueryParameters
			{
				SearchTerm = searchTerm,
				SortBy = sortBy,
				StatusFilters = statusFilters.Where(x => x.Value).Select(x => x.Key).ToArray(),
				PriorityFilters = priorityFilters.Where(x => x.Value).Select(x => x.Key).ToArray()
			};
			applications = await ApplicationService.GetApplicationsAsync(parameters);

		}		

		isLoading = false;
		StateHasChanged();			
	}

	private async Task ClearAllFilters()
	{
		foreach (var filter in statusFilters.Keys.ToList())
		{
			statusFilters[filter] = false;
		}

		foreach (var filter in priorityFilters.Keys.ToList())
		{
			priorityFilters[filter] = false;
		}

		await ApplyFilters();
	}

	private async Task ApplyFilters()
	{
		isLoading = true;
		StateHasChanged();

		var parameters = new QueryParameters
		{
			SearchTerm = searchTerm,
			SortBy = sortBy,
			StatusFilters = statusFilters.Where(x => x.Value).Select(x => x.Key).ToArray(),
			PriorityFilters = priorityFilters.Where(x => x.Value).Select(x => x.Key).ToArray()
		};
		applications = await ApplicationService.GetApplicationsAsync(parameters);

		isLoading = false;
		StateHasChanged();
	}

	private void ToggleView()
	{
		isGridView = !isGridView;
	}
}
