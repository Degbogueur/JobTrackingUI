@page "/applications/trash"
@inject ApplicationService ApplicationService
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Deleted applications</PageTitle>

<div class="d-flex justify-content-between mb-4">
	<h1 class="fw-bold fs-2 mb-0">Deleted applications</h1>
	<a href="/applications" class="btn btn-primary">
		<i class="bi bi-arrow-left"></i> Back to applications
	</a>
</div>

@if (deletedApplications is null || deletedApplications.Items is null)
{
	<Spinner />
}
else
{
	<div class="row g-4">
		@foreach (var application in deletedApplications.Items)
		{
			<div class="col-lg-4 col-md-6">
				<div class="card shadow-sm h-100">
					<div class="card-body p-4 d-flex flex-column h-100">
						<div class="d-flex justify-content-between align-items-center">
							<a class="card-title fw-medium mb-0" href="@($"/applications/{application.Id}")">
								@application.JobTitle
							</a>
							<span class="badge bg-primary fw-medium rounded-pill">@application.Status</span>
						</div>
						<p class="card-text text-small mb-3">@application.CompanyName</p>
						<div class="text-small text-muted" style="font-size: 13px;">
							<p class="card-text mb-2">
								<i class="bi bi-calendar4"></i> Applied on @application.ApplicationDate.ToString("dd MMM yyyy")
							</p>
							@if (application.NextActionDate.HasValue && application.NextAction != null)
							{
								<p class="card-text mb-0">
									<i class="bi bi-calendar4"></i> @application.NextAction on @application.NextActionDate?.ToString("dd MMM yyyy")
								</p>
							}
						</div>
						<p class="mt-2 text-truncate">
							@(application.JobDescription ?? "No description submitted")
						</p>
						<div class="d-flex justify-content-end align-items-center mt-auto gap-3">
							<a href="@($"/applications/{application.Id}")" class="btn btn-outline-primary btn-sm">
								<i class="bi bi-eye"></i>
							</a>
							<a href="@($"/applications/edit/{application.Id}")" class="btn btn-outline-secondary btn-sm">
								<i class="bi bi-pencil-square"></i>
							</a>
							<a role="button" class="btn btn-outline-danger btn-sm" data-bs-target="#deleteModal" data-bs-toggle="modal" @onclick="() => DisplayDeleteModal(application)">
								<i class="bi bi-trash"></i>
							</a>
						</div>
					</div>
				</div>
			</div>
		}
	</div>

	<div class="d-flex justify-content-center mt-4">
		<Pagination PageIndex="deletedApplications.PageIndex"
					PageSize="deletedApplications.PageSize"
					TotalItems="deletedApplications.TotalItems"
					PageIndexChanged="OnPageChanged" />
	</div>
}

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header bg-danger text-white">
				<h1 class="modal-title fs-5" id="deleteModalLabel">Delete confirmation</h1>
				<button type="button" class="btn-close bg-white" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete the application for <strong>@selectedApplication?.JobTitle</strong> at <strong>@selectedApplication?.CompanyName</strong>?<br />
				<p class="mt-2 mb-0">
					<i class="bi bi-exclamation-circle text-danger"></i>This action cannot be undone.
				</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" @onclick="() => ConfirmDeleteAsync(selectedApplication?.Id)" data-bs-dismiss="modal">Delete</button>
			</div>
		</div>
	</div>
</div>

<style>
	.card-title {
		font-size: 18px;
		color: #000;
		text-decoration: none;
	}

		.card-title:hover {
			text-decoration: underline;
			color: var(--bs-primary);
		}

	.text-muted {
		color: #64748b !important;
	}

	.text-truncate {
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
	}
</style>


@code {
	PaginatedModel<ApplicationModel>? deletedApplications;
	private ApplicationModel? selectedApplication;

	protected override async Task OnInitializedAsync()
	{
		deletedApplications = await ApplicationService.GetDeletedApplicationsAsync();
	}

	private void DisplayDeleteModal(ApplicationModel application)
	{
		selectedApplication = application;
	}

	private async Task ConfirmDeleteAsync(int? id)
	{
		if (id.HasValue)
		{
			await ApplicationService.DeleteApplicationAsync(id.Value);

			deletedApplications = await ApplicationService.GetApplicationsAsync();
		}
		else
		{
			selectedApplication = null;
		}
	}

	private async Task OnPageChanged(int pageIndex)
	{
		deletedApplications = await ApplicationService.GetDeletedApplicationsAsync(pageIndex);
	}
}

